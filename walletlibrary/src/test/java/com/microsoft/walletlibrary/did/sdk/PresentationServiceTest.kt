// Copyright (c) Microsoft Corporation. All rights reserved

package com.microsoft.walletlibrary.did.sdk

import android.net.Uri
import com.microsoft.walletlibrary.did.sdk.credential.service.PresentationRequest
import com.microsoft.walletlibrary.did.sdk.credential.service.PresentationResponse
import com.microsoft.walletlibrary.did.sdk.credential.service.RequestedVcPresentationSubmissionMap
import com.microsoft.walletlibrary.did.sdk.credential.service.models.linkedDomains.LinkedDomainMissing
import com.microsoft.walletlibrary.did.sdk.credential.service.models.linkedDomains.LinkedDomainVerified
import com.microsoft.walletlibrary.did.sdk.credential.service.models.oidc.PresentationRequestContent
import com.microsoft.walletlibrary.did.sdk.credential.service.protectors.PresentationResponseFormatter
import com.microsoft.walletlibrary.did.sdk.credential.service.validators.JwtDomainLinkageCredentialValidator
import com.microsoft.walletlibrary.did.sdk.credential.service.validators.JwtValidator
import com.microsoft.walletlibrary.did.sdk.credential.service.validators.PresentationRequestValidator
import com.microsoft.walletlibrary.did.sdk.crypto.protocols.jose.jws.JwsToken
import com.microsoft.walletlibrary.did.sdk.datasource.network.credentialOperations.FetchPresentationRequestNetworkOperation
import com.microsoft.walletlibrary.did.sdk.di.defaultTestSerializer
import com.microsoft.walletlibrary.did.sdk.identifier.models.Identifier
import com.microsoft.walletlibrary.did.sdk.identifier.models.identifierdocument.IdentifierDocument
import com.microsoft.walletlibrary.did.sdk.identifier.models.payload.document.IdentifierDocumentService
import com.microsoft.walletlibrary.did.sdk.identifier.resolvers.Resolver
import com.microsoft.walletlibrary.did.sdk.util.Constants
import com.microsoft.walletlibrary.did.sdk.util.controlflow.InvalidSignatureException
import com.microsoft.walletlibrary.did.sdk.util.controlflow.PresentationException
import com.microsoft.walletlibrary.did.sdk.util.controlflow.Result
import io.mockk.coEvery
import io.mockk.coJustRun
import io.mockk.every
import io.mockk.mockk
import io.mockk.mockkConstructor
import io.mockk.spyk
import io.mockk.verify
import kotlinx.coroutines.runBlocking
import org.assertj.core.api.Assertions.assertThat
import org.junit.Test
import kotlin.Result as KotlinResult

class PresentationServiceTest {

    private val identifierService: IdentifierService = mockk()
    private val masterIdentifier: Identifier = mockk()

    private val mockedResolver: Resolver = mockk()
    private val mockedJwtValidator: JwtValidator = mockk()
    private val presentationRequestValidator: PresentationRequestValidator = mockk()
    private val presentationResponseFormatter: PresentationResponseFormatter = mockk()
    private val mockedJwtDomainLinkageCredentialValidator =
        JwtDomainLinkageCredentialValidator(mockedJwtValidator, defaultTestSerializer)
    private val linkedDomainsService =
        spyk(
            LinkedDomainsService(
                mockk(relaxed = true),
                mockedResolver,
                mockedJwtDomainLinkageCredentialValidator
            )
        )

    private val presentationService =
        spyk(
            PresentationService(
                identifierService,
                linkedDomainsService,
                defaultTestSerializer,
                mockedJwtValidator,
                presentationRequestValidator,
                mockk(relaxed = true),
                presentationResponseFormatter
            ),
            recordPrivateCalls = true
        )
    private val formattedResponses = Pair("FORMATTED_RESPONSE", listOf("FORMATTED_RESPONSE"))
    private val expectedPresentationRequestString =
        """{
  "iat": 1644007434,
  "response_type": "id_token",
  "response_mode": "post",
  "scope": "openid",
  "nonce": "wbecIKWI/SsdpjRUy0pXHQ==",
  "client_id": "did:ion:EiBP2wtU-Hcp2vDioFLjS0KKTeGFbeKhuQbWpHnczKsVIQ:eyJkZWx0YSI6eyJwYXRjaGVzIjpbeyJhY3Rpb24iOiJyZXBsYWNlIiwiZG9jdW1lbnQiOnsicHVibGljS2V5cyI6W3siaWQiOiJzaWdfZGVjOTNjZTgiLCJwdWJsaWNLZXlKd2siOnsiY3J2Ijoic2VjcDI1NmsxIiwia3R5IjoiRUMiLCJ4IjoiS3dZcFNHWFFmdVctTlluM1RzMExQMVB4cC1uNjNuczlDNnBaWGkyMFp2ZyIsInkiOiJ0QnV3R3dOZjVkaG5jZjFXVXhiM0lwQTVyaml6ZmRYOUtjekl1b3VLVkNZIn0sInB1cnBvc2VzIjpbImF1dGhlbnRpY2F0aW9uIiwiYXNzZXJ0aW9uTWV0aG9kIl0sInR5cGUiOiJFY2RzYVNlY3AyNTZrMVZlcmlmaWNhdGlvbktleTIwMTkifV0sInNlcnZpY2VzIjpbeyJpZCI6ImxpbmtlZGRvbWFpbnMiLCJzZXJ2aWNlRW5kcG9pbnQiOnsib3JpZ2lucyI6WyJodHRwczovL2RvbWFpbi5jb20vIl19LCJ0eXBlIjoiTGlua2VkRG9tYWlucyJ9LHsiaWQiOiJodWIiLCJzZXJ2aWNlRW5kcG9pbnQiOnsiaW5zdGFuY2VzIjpbImh0dHBzOi8vZGV2Lmh1Yi5tc2lkZW50aXR5LmNvbS92MS4wL2UxZjY2ZjJlLWMwNTAtNDMwOC04MWIzLTNkN2VhN2VmM2IxYiJdfSwidHlwZSI6IklkZW50aXR5SHViIn1dfX1dLCJ1cGRhdGVDb21taXRtZW50IjoiRWlEeGpZMzBTZkVDLWZkYkczWVZRNllHS3VOSldsNEJXX0JwRHFadDA4LXFtdyJ9LCJzdWZmaXhEYXRhIjp7ImRlbHRhSGFzaCI6IkVpRFpGSDd6SzF5LS02MTc2X3lTS2dzeVJPT3BpaXZnUHZmSXl1S2k4bHNZV2ciLCJyZWNvdmVyeUNvbW1pdG1lbnQiOiJFaUJGX1Z2SFZ0eWkyeDNTdGtnRUVrV0g4dGNfRURZd1JhQlpxNl9pMllCS3NBIn19",
  "redirect_uri": "https://4820-192-182-155-160.ngrok.io/v1.0/e1f66f2e-c050-4308-81b3-3d7ea7ef3b1b/verifiablecredentials/present",
  "state": "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",
  "exp": 1644007734,
  "registration": {
    "client_name": "December Demo",
    "subject_syntax_types_supported": [
      "did:ion"
    ],
    "vp_formats": {
      "jwt_vp": {
        "alg": [
          "ES256K"
        ]
      },
      "jwt_vc": {
        "alg": [
          "ES256K"
        ]
      }
    },
    "client_purpose": "DEBUGDEBUGDEBUG",
    "logo_uri": "https://foo.com/logo"
  },
  "claims": {
    "vp_token": {
      "presentation_definition": {
        "id": "ceb93534-b4ac-4fcf-8166-11a8c593e4e6",
        "input_descriptors": [
          {
            "id": "NameTagCredential",
            "name": "NameTagCredential",
            "purpose": "DEBUGDEBUGDEBUGDEBUGDEBUGDEBUG",
            "schema": [
              {
                "uri": "NameTagCredential"
              }
            ],
            "constraints": {
              "fields": [
                {
                  "path": [
                    "${'$'}.issuer",
                    "${'$'}.vc.issuer",
                    "${'$'}.iss"
                  ],
                  "filter": {
                    "type": "string",
                    "pattern": "did:ion:EiBP2wtU-Hcp2vDioFLjS0KKTeGFbeKhuQbWpHnczKsVIQ:eyJkZWx0YSI6eyJwYXRjaGVzIjpbeyJhY3Rpb24iOiJyZXBsYWNlIiwiZG9jdW1lbnQiOnsicHVibGljS2V5cyI6W3siaWQiOiJzaWdfZGVjOTNjZTgiLCJwdWJsaWNLZXlKd2siOnsiY3J2Ijoic2VjcDI1NmsxIiwia3R5IjoiRUMiLCJ4IjoiS3dZcFNHWFFmdVctTlluM1RzMExQMVB4cC1uNjNuczlDNnBaWGkyMFp2ZyIsInkiOiJ0QnV3R3dOZjVkaG5jZjFXVXhiM0lwQTVyaml6ZmRYOUtjekl1b3VLVkNZIn0sInB1cnBvc2VzIjpbImF1dGhlbnRpY2F0aW9uIiwiYXNzZXJ0aW9uTWV0aG9kIl0sInR5cGUiOiJFY2RzYVNlY3AyNTZrMVZlcmlmaWNhdGlvbktleTIwMTkifV0sInNlcnZpY2VzIjpbeyJpZCI6ImxpbmtlZGRvbWFpbnMiLCJzZXJ2aWNlRW5kcG9pbnQiOnsib3JpZ2lucyI6WyJodHRwczovL2RvbWFpbi5jb20vIl19LCJ0eXBlIjoiTGlua2VkRG9tYWlucyJ9LHsiaWQiOiJodWIiLCJzZXJ2aWNlRW5kcG9pbnQiOnsiaW5zdGFuY2VzIjpbImh0dHBzOi8vZGV2Lmh1Yi5tc2lkZW50aXR5LmNvbS92MS4wL2UxZjY2ZjJlLWMwNTAtNDMwOC04MWIzLTNkN2VhN2VmM2IxYiJdfSwidHlwZSI6IklkZW50aXR5SHViIn1dfX1dLCJ1cGRhdGVDb21taXRtZW50IjoiRWlEeGpZMzBTZkVDLWZkYkczWVZRNllHS3VOSldsNEJXX0JwRHFadDA4LXFtdyJ9LCJzdWZmaXhEYXRhIjp7ImRlbHRhSGFzaCI6IkVpRFpGSDd6SzF5LS02MTc2X3lTS2dzeVJPT3BpaXZnUHZmSXl1S2k4bHNZV2ciLCJyZWNvdmVyeUNvbW1pdG1lbnQiOiJFaUJGX1Z2SFZ0eWkyeDNTdGtnRUVrV0g4dGNfRURZd1JhQlpxNl9pMllCS3NBIn19|did:ion:EiAv0eJ5cB0hGWVH5YbY-uw1K71EpOST6ztueEQzVCEc0A:eyJkZWx0YSI6eyJwYXRjaGVzIjpbeyJhY3Rpb24iOiJyZXBsYWNlIiwiZG9jdW1lbnQiOnsicHVibGljS2V5cyI6W3siaWQiOiJzaWdfY2FiNjVhYTAiLCJwdWJsaWNLZXlKd2siOnsiY3J2Ijoic2VjcDI1NmsxIiwia3R5IjoiRUMiLCJ4IjoiOG15MHFKUGt6OVNRRTkyRTlmRFg4ZjJ4bTR2X29ZMXdNTEpWWlQ1SzhRdyIsInkiOiIxb0xsVG5rNzM2RTNHOUNNUTh3WjJQSlVBM0phVnY5VzFaVGVGSmJRWTFFIn0sInB1cnBvc2VzIjpbImF1dGhlbnRpY2F0aW9uIiwiYXNzZXJ0aW9uTWV0aG9kIl0sInR5cGUiOiJFY2RzYVNlY3AyNTZrMVZlcmlmaWNhdGlvbktleTIwMTkifV0sInNlcnZpY2VzIjpbeyJpZCI6ImxpbmtlZGRvbWFpbnMiLCJzZXJ2aWNlRW5kcG9pbnQiOnsib3JpZ2lucyI6WyJodHRwczovL3N3ZWVwc3Rha2VzLmRpZC5taWNyb3NvZnQuY29tLyJdfSwidHlwZSI6IkxpbmtlZERvbWFpbnMifV19fV0sInVwZGF0ZUNvbW1pdG1lbnQiOiJFaUFwcmVTNy1Eczh5MDFnUzk2cE5iVnpoRmYxUlpvblZ3UkswbG9mZHdOZ2FBIn0sInN1ZmZpeERhdGEiOnsiZGVsdGFIYXNoIjoiRWlEMWRFdUVldERnMnhiVEs0UDZVTTNuWENKVnFMRE11M29IVWNMamtZMWFTdyIsInJlY292ZXJ5Q29tbWl0bWVudCI6IkVpREFkSzFWNkpja1BpY0RBcGFxV2IyZE95MFRNcmJKTmllNmlKVzk4Zk54bkEifX0"
                  }
                }
              ]
            }
          },
          {
            "id": "BusinessCardCredential",
            "name": "BusinessCardCredential",
            "purpose": "DEBUGDEBUGDEBUGDEBUGDEBUGDEBUG",
            "schema": [
              {
                "uri": "BusinessCardCredential"
              }
            ],
            "constraints": {
              "fields": [
                {
                  "path": [
                    "${'$'}.issuer",
                    "${'$'}.vc.issuer",
                    "${'$'}.iss"
                  ],
                  "filter": {
                    "type": "string",
                    "pattern": "did:ion:EiBP2wtU-Hcp2vDioFLjS0KKTeGFbeKhuQbWpHnczKsVIQ:eyJkZWx0YSI6eyJwYXRjaGVzIjpbeyJhY3Rpb24iOiJyZXBsYWNlIiwiZG9jdW1lbnQiOnsicHVibGljS2V5cyI6W3siaWQiOiJzaWdfZGVjOTNjZTgiLCJwdWJsaWNLZXlKd2siOnsiY3J2Ijoic2VjcDI1NmsxIiwia3R5IjoiRUMiLCJ4IjoiS3dZcFNHWFFmdVctTlluM1RzMExQMVB4cC1uNjNuczlDNnBaWGkyMFp2ZyIsInkiOiJ0QnV3R3dOZjVkaG5jZjFXVXhiM0lwQTVyaml6ZmRYOUtjekl1b3VLVkNZIn0sInB1cnBvc2VzIjpbImF1dGhlbnRpY2F0aW9uIiwiYXNzZXJ0aW9uTWV0aG9kIl0sInR5cGUiOiJFY2RzYVNlY3AyNTZrMVZlcmlmaWNhdGlvbktleTIwMTkifV0sInNlcnZpY2VzIjpbeyJpZCI6ImxpbmtlZGRvbWFpbnMiLCJzZXJ2aWNlRW5kcG9pbnQiOnsib3JpZ2lucyI6WyJodHRwczovL2RvbWFpbi5jb20vIl19LCJ0eXBlIjoiTGlua2VkRG9tYWlucyJ9LHsiaWQiOiJodWIiLCJzZXJ2aWNlRW5kcG9pbnQiOnsiaW5zdGFuY2VzIjpbImh0dHBzOi8vZGV2Lmh1Yi5tc2lkZW50aXR5LmNvbS92MS4wL2UxZjY2ZjJlLWMwNTAtNDMwOC04MWIzLTNkN2VhN2VmM2IxYiJdfSwidHlwZSI6IklkZW50aXR5SHViIn1dfX1dLCJ1cGRhdGVDb21taXRtZW50IjoiRWlEeGpZMzBTZkVDLWZkYkczWVZRNllHS3VOSldsNEJXX0JwRHFadDA4LXFtdyJ9LCJzdWZmaXhEYXRhIjp7ImRlbHRhSGFzaCI6IkVpRFpGSDd6SzF5LS02MTc2X3lTS2dzeVJPT3BpaXZnUHZmSXl1S2k4bHNZV2ciLCJyZWNvdmVyeUNvbW1pdG1lbnQiOiJFaUJGX1Z2SFZ0eWkyeDNTdGtnRUVrV0g4dGNfRURZd1JhQlpxNl9pMllCS3NBIn19"
                  }
                }
              ]
            }
          }
        ]
      }
    }
  }
}"""
    private val expectedPresentationRequestJwt =
        "eyJhbGciOiJFUzI1NksiLCJraWQiOiJkaWQ6aW9uOkVpQlAyd3RVLUhjcDJ2RGlvRkxqUzBLS1RlR0ZiZUtodVFiV3BIbmN6S3NWSVE6ZXlKa1pXeDBZU0k2ZXlKd1lYUmphR1Z6SWpwYmV5SmhZM1JwYjI0aU9pSnlaWEJzWVdObElpd2laRzlqZFcxbGJuUWlPbnNpY0hWaWJHbGpTMlY1Y3lJNlczc2lhV1FpT2lKemFXZGZaR1ZqT1ROalpUZ2lMQ0p3ZFdKc2FXTkxaWGxLZDJzaU9uc2lZM0oySWpvaWMyVmpjREkxTm1zeElpd2lhM1I1SWpvaVJVTWlMQ0o0SWpvaVMzZFpjRk5IV0ZGbWRWY3RUbGx1TTFSek1FeFFNVkI0Y0MxdU5qTnVjemxETm5CYVdHa3lNRnAyWnlJc0lua2lPaUowUW5WM1IzZE9aalZrYUc1alpqRlhWWGhpTTBsd1FUVnlhbWw2Wm1SWU9VdGpla2wxYjNWTFZrTlpJbjBzSW5CMWNuQnZjMlZ6SWpwYkltRjFkR2hsYm5ScFkyRjBhVzl1SWl3aVlYTnpaWEowYVc5dVRXVjBhRzlrSWwwc0luUjVjR1VpT2lKRlkyUnpZVk5sWTNBeU5UWnJNVlpsY21sbWFXTmhkR2x2Ymt0bGVUSXdNVGtpZlYwc0luTmxjblpwWTJWeklqcGJleUpwWkNJNklteHBibXRsWkdSdmJXRnBibk1pTENKelpYSjJhV05sUlc1a2NHOXBiblFpT25zaWIzSnBaMmx1Y3lJNld5Sm9kSFJ3Y3pvdkwyUnZiV0ZwYmk1amIyMHZJbDE5TENKMGVYQmxJam9pVEdsdWEyVmtSRzl0WVdsdWN5SjlMSHNpYVdRaU9pSm9kV0lpTENKelpYSjJhV05sUlc1a2NHOXBiblFpT25zaWFXNXpkR0Z1WTJWeklqcGJJbWgwZEhCek9pOHZaR1YyTG1oMVlpNXRjMmxrWlc1MGFYUjVMbU52YlM5Mk1TNHdMMlV4WmpZMlpqSmxMV013TlRBdE5ETXdPQzA0TVdJekxUTmtOMlZoTjJWbU0ySXhZaUpkZlN3aWRIbHdaU0k2SWtsa1pXNTBhWFI1U0hWaUluMWRmWDFkTENKMWNHUmhkR1ZEYjIxdGFYUnRaVzUwSWpvaVJXbEVlR3BaTXpCVFprVkRMV1prWWtjeldWWlJObGxIUzNWT1NsZHNORUpYWDBKd1JIRmFkREE0TFhGdGR5SjlMQ0p6ZFdabWFYaEVZWFJoSWpwN0ltUmxiSFJoU0dGemFDSTZJa1ZwUkZwR1NEZDZTekY1TFMwMk1UYzJYM2xUUzJkemVWSlBUM0JwYVhablVIWm1TWGwxUzJrNGJITlpWMmNpTENKeVpXTnZkbVZ5ZVVOdmJXMXBkRzFsYm5RaU9pSkZhVUpHWDFaMlNGWjBlV2t5ZUROVGRHdG5SVVZyVjBnNGRHTmZSVVJaZDFKaFFscHhObDlwTWxsQ1MzTkJJbjE5I3NpZ19kZWM5M2NlOCIsInR5cCI6IkpXVCJ9..mUH238EdWsM2vD3wRby7MYTEQh7OaXFZdudDWhi6twBMQtPpni7MGihUI4Eg-PZWiZokqncclvy2S7suKfXO7w"
    private val mockedIdentifierDocument: IdentifierDocument = mockk()
    private val mockedIdentifierDocumentService: IdentifierDocumentService = mockk()
    private val mockedIdentifierDocumentServiceEndpoint = "testserviceendpoint.com"
    private val mockedIdentifierDocumentServiceType = "LinkedDomains"

    private val suppliedOpenIdUrl =
        "openid://vc/?request_uri=https://test-relyingparty.azurewebsites.net/request/OmTlKvp8_qxFbg"
    private val expectedEntityName = "December Demo"
    private val expectedEntityIdentifier =
        "did:ion:EiBP2wtU-Hcp2vDioFLjS0KKTeGFbeKhuQbWpHnczKsVIQ:eyJkZWx0YSI6eyJwYXRjaGVzIjpbeyJhY3Rpb24iOiJyZXBsYWNlIiwiZG9jdW1lbnQiOnsicHVibGljS2V5cyI6W3siaWQiOiJzaWdfZGVjOTNjZTgiLCJwdWJsaWNLZXlKd2siOnsiY3J2Ijoic2VjcDI1NmsxIiwia3R5IjoiRUMiLCJ4IjoiS3dZcFNHWFFmdVctTlluM1RzMExQMVB4cC1uNjNuczlDNnBaWGkyMFp2ZyIsInkiOiJ0QnV3R3dOZjVkaG5jZjFXVXhiM0lwQTVyaml6ZmRYOUtjekl1b3VLVkNZIn0sInB1cnBvc2VzIjpbImF1dGhlbnRpY2F0aW9uIiwiYXNzZXJ0aW9uTWV0aG9kIl0sInR5cGUiOiJFY2RzYVNlY3AyNTZrMVZlcmlmaWNhdGlvbktleTIwMTkifV0sInNlcnZpY2VzIjpbeyJpZCI6ImxpbmtlZGRvbWFpbnMiLCJzZXJ2aWNlRW5kcG9pbnQiOnsib3JpZ2lucyI6WyJodHRwczovL2RvbWFpbi5jb20vIl19LCJ0eXBlIjoiTGlua2VkRG9tYWlucyJ9LHsiaWQiOiJodWIiLCJzZXJ2aWNlRW5kcG9pbnQiOnsiaW5zdGFuY2VzIjpbImh0dHBzOi8vZGV2Lmh1Yi5tc2lkZW50aXR5LmNvbS92MS4wL2UxZjY2ZjJlLWMwNTAtNDMwOC04MWIzLTNkN2VhN2VmM2IxYiJdfSwidHlwZSI6IklkZW50aXR5SHViIn1dfX1dLCJ1cGRhdGVDb21taXRtZW50IjoiRWlEeGpZMzBTZkVDLWZkYkczWVZRNllHS3VOSldsNEJXX0JwRHFadDA4LXFtdyJ9LCJzdWZmaXhEYXRhIjp7ImRlbHRhSGFzaCI6IkVpRFpGSDd6SzF5LS02MTc2X3lTS2dzeVJPT3BpaXZnUHZmSXl1S2k4bHNZV2ciLCJyZWNvdmVyeUNvbW1pdG1lbnQiOiJFaUJGX1Z2SFZ0eWkyeDNTdGtnRUVrV0g4dGNfRURZd1JhQlpxNl9pMllCS3NBIn19"

    private val invalidSignaturePresentationRequestJwt =
        "eyJhbGciOiJFUzI1NksiLCJraWQiOiJkaWQ6aW9uOkVpQlAyd3RVLUhjcDJ2RGlvRkxqUzBLS1RlR0ZiZUtodVFiV3BIbmN6S3NWSVE6ZXlKa1pXeDBZU0k2ZXlKd1lYUmphR1Z6SWpwYmV5SmhZM1JwYjI0aU9pSnlaWEJzWVdObElpd2laRzlqZFcxbGJuUWlPbnNpY0hWaWJHbGpTMlY1Y3lJNlczc2lhV1FpT2lKemFXZGZaR1ZqT1ROalpUZ2lMQ0p3ZFdKc2FXTkxaWGxLZDJzaU9uc2lZM0oySWpvaWMyVmpjREkxTm1zeElpd2lhM1I1SWpvaVJVTWlMQ0o0SWpvaVMzZFpjRk5IV0ZGbWRWY3RUbGx1TTFSek1FeFFNVkI0Y0MxdU5qTnVjemxETm5CYVdHa3lNRnAyWnlJc0lua2lPaUowUW5WM1IzZE9aalZrYUc1alpqRlhWWGhpTTBsd1FUVnlhbWw2Wm1SWU9VdGpla2wxYjNWTFZrTlpJbjBzSW5CMWNuQnZjMlZ6SWpwYkltRjFkR2hsYm5ScFkyRjBhVzl1SWl3aVlYTnpaWEowYVc5dVRXVjBhRzlrSWwwc0luUjVjR1VpT2lKRlkyUnpZVk5sWTNBeU5UWnJNVlpsY21sbWFXTmhkR2x2Ymt0bGVUSXdNVGtpZlYwc0luTmxjblpwWTJWeklqcGJleUpwWkNJNklteHBibXRsWkdSdmJXRnBibk1pTENKelpYSjJhV05sUlc1a2NHOXBiblFpT25zaWIzSnBaMmx1Y3lJNld5Sm9kSFJ3Y3pvdkwyUnZiV0ZwYmk1amIyMHZJbDE5TENKMGVYQmxJam9pVEdsdWEyVmtSRzl0WVdsdWN5SjlMSHNpYVdRaU9pSm9kV0lpTENKelpYSjJhV05sUlc1a2NHOXBiblFpT25zaWFXNXpkR0Z1WTJWeklqcGJJbWgwZEhCek9pOHZaR1YyTG1oMVlpNXRjMmxrWlc1MGFYUjVMbU52YlM5Mk1TNHdMMlV4WmpZMlpqSmxMV013TlRBdE5ETXdPQzA0TVdJekxUTmtOMlZoTjJWbU0ySXhZaUpkZlN3aWRIbHdaU0k2SWtsa1pXNTBhWFI1U0hWaUluMWRmWDFkTENKMWNHUmhkR1ZEYjIxdGFYUnRaVzUwSWpvaVJXbEVlR3BaTXpCVFprVkRMV1prWWtjeldWWlJObGxIUzNWT1NsZHNORUpYWDBKd1JIRmFkREE0TFhGdGR5SjlMQ0p6ZFdabWFYaEVZWFJoSWpwN0ltUmxiSFJoU0dGemFDSTZJa1ZwUkZwR1NEZDZTekY1TFMwMk1UYzJYM2xUUzJkemVWSlBUM0JwYVhablVIWm1TWGwxUzJrNGJITlpWMmNpTENKeVpXTnZkbVZ5ZVVOdmJXMXBkRzFsYm5RaU9pSkZhVUpHWDFaMlNGWjBlV2t5ZUROVGRHdG5SVVZyVjBnNGRHTmZSVVJaZDFKaFFscHhObDlwTWxsQ1MzTkJJbjE5I3NpZ19kZWM5M2NlOCIsInR5cCI6IkpXVCJ9..9gqP54j95MqW4szvbjC_HQeK2-OvZci5z8HWPAPelyymlCkesM6pY9uxl_HFRvVgrAqPi2sNDMNddNsXoKDhqg"

    init {
        coEvery { identifierService.getMasterIdentifier() } returns Result.Success(masterIdentifier)
        mockkConstructor(FetchPresentationRequestNetworkOperation::class)
    }

    @Test
    fun `test to get Presentation Request successfully from valid request uri param`() {
        // Arrange
        val mockUri = mockk<Uri>()
        mockIdentifierAndLinkedDomains()
        val requestUriParam = "https://test-relyingparty.azurewebsites.net/request/OmTlKvp8_qxFbg"
        val expectedPresentationRequestContent = defaultTestSerializer.decodeFromString(
            PresentationRequestContent.serializer(),
            expectedPresentationRequestString
        )

        every { presentationService["verifyUri"](suppliedOpenIdUrl) } returns mockUri
        every { mockUri.getQueryParameter("request") } returns null
        every { mockUri.getQueryParameter("request_uri") } returns requestUriParam
        val expectedPresentationRequest = unwrapPresentationContent(expectedPresentationRequestJwt)
        coEvery { presentationService["fetchRequest"](requestUriParam, emptyList<String>()) } returns KotlinResult.success(
            expectedPresentationRequest
        )
        coEvery { mockedJwtValidator.verifySignature(any()) } returns true
        coJustRun { presentationRequestValidator.validate(any()) }

        runBlocking {
            // act
            val actualRequest = presentationService.getRequest(suppliedOpenIdUrl, emptyList())
            assertThat(actualRequest).isInstanceOf(Result.Success::class.java)
            val actualPresentationRequestContent = (actualRequest as Result.Success).payload.content

            // assert
            assertPresentationRequestContent(actualPresentationRequestContent, expectedPresentationRequestContent)
            assertThat(actualRequest.payload.linkedDomainResult).isInstanceOf(LinkedDomainVerified::class.java)
            assertThat((actualRequest.payload.linkedDomainResult as LinkedDomainVerified).domainUrl).isEqualTo(
                mockedIdentifierDocumentServiceEndpoint
            )
            assertThat(actualRequest.payload.entityName).isEqualTo(expectedEntityName)
            assertThat(actualRequest.payload.entityIdentifier).isEqualTo(expectedEntityIdentifier)
        }
    }

    @Test
    fun `test to get Presentation Request successfully from valid request param`() {
        // arrange
        val mockUri = mockk<Uri>()
        mockPresentationRequestFromNetwork()
        mockIdentifierAndLinkedDomains()

        every { presentationService["verifyUri"](suppliedOpenIdUrl) } returns mockUri
        every { mockUri.getQueryParameter("request_uri") } returns null
        every { mockUri.getQueryParameter("request") } returns expectedPresentationRequestJwt
        every {
            presentationService["verifyAndUnwrapPresentationRequestFromQueryParam"](
                expectedPresentationRequestString
            )
        } returns Result.Success(
            defaultTestSerializer.decodeFromString(
                PresentationRequestContent.serializer(),
                expectedPresentationRequestString
            )
        )
        coJustRun { presentationRequestValidator.validate(any()) }

        runBlocking {
            // act
            val actualRequest = presentationService.getRequest(suppliedOpenIdUrl, emptyList())
            assertThat(actualRequest).isInstanceOf(Result.Success::class.java)
            val actualPresentationRequestContent = (actualRequest as Result.Success).payload.content
            val expectedPresentationRequestContent = defaultTestSerializer.decodeFromString(
                PresentationRequestContent.serializer(),
                expectedPresentationRequestString
            )

            // assert
            assertPresentationRequestContent(
                actualPresentationRequestContent,
                expectedPresentationRequestContent
            )
            assertThat(actualRequest.payload.linkedDomainResult).isInstanceOf(LinkedDomainVerified::class.java)
            assertThat((actualRequest.payload.linkedDomainResult as LinkedDomainVerified).domainUrl).isEqualTo(
                mockedIdentifierDocumentServiceEndpoint
            )
            assertThat(actualRequest.payload.entityName).isEqualTo(expectedEntityName)
            assertThat(actualRequest.payload.entityIdentifier).isEqualTo(expectedEntityIdentifier)
        }
    }

    @Test
    fun `test to get Presentation Request failed from request param with invalid signature`() {
        // arrange
        val mockUri = mockk<Uri>()
        mockPresentationRequestWithInvalidSignatureFromNetwork()
        mockIdentifierAndLinkedDomains()

        every { presentationService["verifyUri"](suppliedOpenIdUrl) } returns mockUri
        every { mockUri.getQueryParameter("request_uri") } returns null
        every { mockUri.getQueryParameter("request") } returns invalidSignaturePresentationRequestJwt
        coJustRun { presentationRequestValidator.validate(any()) }

        runBlocking {
            // act
            val actualRequest = presentationService.getRequest(suppliedOpenIdUrl, emptyList())
            // assert
            assertThat(actualRequest).isInstanceOf(Result.Failure::class.java)
            assertThat((actualRequest as Result.Failure).payload).isInstanceOf(
                InvalidSignatureException::class.java
            )
        }
    }

    @Test
    fun `test to get Presentation Request failed from invalid param`() {
        // arrange
        val mockUri = mockk<Uri>()
        mockPresentationRequestFromNetwork()
        mockIdentifierAndLinkedDomains()

        every { presentationService["verifyUri"](suppliedOpenIdUrl) } returns mockUri
        every { mockUri.getQueryParameter("request") } returns null
        every { mockUri.getQueryParameter("request_uri") } returns null
        coJustRun { presentationRequestValidator.validate(any()) }

        runBlocking {
            // act
            val actualRequest = presentationService.getRequest(suppliedOpenIdUrl, emptyList())
            // assert
            assertThat(actualRequest).isInstanceOf(Result.Failure::class.java)
            assertThat((actualRequest as Result.Failure).payload).isInstanceOf(PresentationException::class.java)
        }
    }

    @Test
    fun `test to send multiple VP Presentation Response`() {
        // arrange
        val expectedPresentationRequestContent =
            defaultTestSerializer.decodeFromString(
                PresentationRequestContent.serializer(),
                expectedPresentationRequestString
            )
        val presentationRequest =
            PresentationRequest(expectedPresentationRequestContent, LinkedDomainMissing)
        val presentationResponse = presentationRequest.getPresentationDefinitions().map {
            PresentationResponse(presentationRequest, it.id)
        }
        val presentationSubmissionMap: RequestedVcPresentationSubmissionMap = mutableMapOf()
        presentationResponse.forEach { response ->
            presentationSubmissionMap += response.requestedVcPresentationSubmissionMap
        }
        every {
            presentationResponseFormatter.formatResponses(
                presentationRequest,
                presentationResponse,
                masterIdentifier,
                Constants.DEFAULT_EXPIRATION_IN_SECONDS
            )
        } returns formattedResponses
        every {
            presentationService["formAndSendResponse"](
                presentationRequest,
                presentationResponse,
                masterIdentifier,
                Constants.DEFAULT_EXPIRATION_IN_SECONDS
            )
        } returns Result.Success(Unit)

        runBlocking {
            // act
            val presentedResponse =
                presentationService.sendResponse(presentationRequest, presentationResponse, additionalHeaders = emptyMap())
            // assert
            assertThat(presentedResponse).isInstanceOf(Result.Success::class.java)
        }

        verify(exactly = 1) {
            presentationService["formAndSendResponse"](
                presentationRequest,
                presentationResponse,
                masterIdentifier,
                emptyMap<String, String>(),
                Constants.DEFAULT_EXPIRATION_IN_SECONDS
            )
        }
    }

    private fun unwrapPresentationContent(jwsTokenString: String): PresentationRequestContent {
        val jwsToken = JwsToken.deserialize(jwsTokenString)
        return defaultTestSerializer.decodeFromString(
            PresentationRequestContent.serializer(),
            jwsToken.content()
        )
    }

    private fun mockIdentifierAndLinkedDomains() {
        coEvery { linkedDomainsService.fetchDocumentAndVerifyLinkedDomains(any()) } returns KotlinResult.success(
            LinkedDomainVerified(mockedIdentifierDocumentServiceEndpoint)
        )
        coEvery { mockedResolver.resolve(expectedEntityIdentifier) } returns KotlinResult.success(
            mockedIdentifierDocument
        )
        every { mockedIdentifierDocument.service } returns listOf(mockedIdentifierDocumentService)
        every { mockedIdentifierDocumentService.type } returns mockedIdentifierDocumentServiceType
        every { mockedIdentifierDocumentService.serviceEndpoint } returns listOf(
            mockedIdentifierDocumentServiceEndpoint
        )
    }

    private fun mockPresentationRequestFromNetwork() {
        val expectedPresentationRequest = unwrapPresentationContent(expectedPresentationRequestJwt)
        coEvery { presentationService["fetchRequest"]("suppliedOpenIdUrl", emptyList<String>()) } returns KotlinResult.success(
            expectedPresentationRequest
        )
        coEvery { mockedJwtValidator.verifySignature(any()) } returns true
    }

    private fun mockPresentationRequestWithInvalidSignatureFromNetwork() {
        val expectedPresentationRequest = unwrapPresentationContent(expectedPresentationRequestJwt)
        coEvery { presentationService["fetchRequest"]("suppliedOpenIdUrl", emptyList<String>()) } returns KotlinResult.success(
            expectedPresentationRequest
        )
        coEvery { mockedJwtValidator.verifySignature(any()) } returns false
    }

    private fun assertPresentationRequestContent(
        actualPresentationRequestContent: PresentationRequestContent,
        expectedPresentationRequestContent: PresentationRequestContent
    ) {
        assertThat(actualPresentationRequestContent.scope).isEqualTo(
            expectedPresentationRequestContent.scope
        )
        assertThat(actualPresentationRequestContent.claims).isEqualTo(
            expectedPresentationRequestContent.claims
        )
        assertThat(actualPresentationRequestContent.clientId).isEqualTo(
            expectedPresentationRequestContent.clientId
        )
        assertThat(actualPresentationRequestContent.audience).isEqualTo(
            expectedPresentationRequestContent.audience
        )
        assertThat(actualPresentationRequestContent.nonce).isEqualTo(
            expectedPresentationRequestContent.nonce
        )
        assertThat(actualPresentationRequestContent.expirationTime).isEqualTo(
            expectedPresentationRequestContent.expirationTime
        )
        assertThat(actualPresentationRequestContent.idTokenCreationTime).isEqualTo(
            expectedPresentationRequestContent.idTokenCreationTime
        )
        assertThat(actualPresentationRequestContent.idTokenHint).isEqualTo(
            expectedPresentationRequestContent.idTokenHint
        )
        assertThat(actualPresentationRequestContent.pinDetails).isEqualTo(
            expectedPresentationRequestContent.pinDetails
        )
        assertThat(actualPresentationRequestContent.prompt).isEqualTo(
            expectedPresentationRequestContent.prompt
        )
        assertThat(actualPresentationRequestContent.redirectUrl).isEqualTo(
            expectedPresentationRequestContent.redirectUrl
        )
        assertThat(actualPresentationRequestContent.responseType).isEqualTo(
            expectedPresentationRequestContent.responseType
        )
        assertThat(actualPresentationRequestContent.responseMode).isEqualTo(
            expectedPresentationRequestContent.responseMode
        )
        assertThat(actualPresentationRequestContent.state).isEqualTo(
            expectedPresentationRequestContent.state
        )
    }
}
